[{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20250111%E4%BB%99%E6%B9%96%E6%A4%8D%E7%89%A9%E5%9B%AD/","summary":"","title":"20250111仙湖植物园"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20241231%E8%A5%BF%E5%AE%89-%E5%89%AF%E6%9C%AC/","summary":"","title":"20241231西安"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20241231%E8%A5%BF%E5%AE%89/","summary":"","title":"20241231西安"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/2024%E5%85%B6%E5%AE%83/","summary":"","title":"2024其它"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20241222%E5%86%AC%E8%87%B3%E6%8B%9B%E5%95%86%E8%9B%87%E5%8F%A3/","summary":"","title":"20241222冬至招商蛇口"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20241130%E6%A2%85%E6%9E%97%E7%BB%BF%E9%81%93/","summary":"","title":"20241130梅林绿道"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20241109%E9%A6%99%E6%B8%AF/","summary":"","title":"20241109香港"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240503%E8%A5%BF%E5%87%A4%E5%85%AC%E5%9B%AD/","summary":"","title":"20240503西凤公园"},{"content":"Java面试八股文思维导图合集\n","permalink":"https://liguicheng.github.io/posts/resource/java%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","summary":"Java面试八股文思维导图合集","title":"java面试八股文思维导图"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240323%E5%A1%98%E6%9C%97%E5%B1%B1/","summary":"","title":"20240323塘朗山"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240228%E8%BF%8E%E6%A0%87%E6%97%97/","summary":"","title":"20240228迎标旗"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240216%E5%88%9D%E4%B8%83%E8%B4%B5%E5%B1%BF%E8%81%9A%E4%BC%9A/","summary":"","title":"20240216初七贵屿聚会"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240214%E9%BE%99%E8%85%BE%E6%9D%AF%E4%B9%92%E4%B9%93%E7%90%83%E6%AF%94%E8%B5%9B/","summary":"","title":"20240214龙腾杯乒乓球比赛"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240115%E5%82%8D%E6%99%9A%E4%BA%91%E5%BD%A9/","summary":"","title":"20240115傍晚云彩"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240113%E6%B1%A4%E5%B4%8E%E6%B1%A4%E6%B3%89/","summary":"","title":"20240113汤崎汤泉"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20240111%E4%B8%AD%E5%BF%83%E5%85%AC%E5%9B%AD/","summary":"","title":"20240111中心公园"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20231218%E9%98%B3%E6%B1%9F%E4%B9%8B%E8%A1%8C/","summary":"","title":"20231218阳江之行·大学室友结婚"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20231216%E6%A2%A7%E6%A1%90%E7%BB%BF%E9%81%93/","summary":"","title":"20231216梧桐绿道"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20231210%E6%B7%B1%E5%9C%B3%E4%B9%92%E4%B9%93%E7%90%83%E7%AD%89%E7%BA%A7%E6%AF%94%E8%B5%9B/","summary":"","title":"20231210深圳乒乓球甲c"},{"content":"\r","permalink":"https://liguicheng.github.io/posts/life/20231203%E6%B4%AA%E6%B9%96%E5%85%AC%E5%9B%AD/","summary":"","title":"20231203洪湖公园"},{"content":"第一天: 本地仓库 故事的主角是小明，一个刚入门编程的小白。他正在为一个项目写代码，但是他发现每次修改代码都很麻烦，因为他要不断地备份文件，而且很容易弄混版本。有一天，他听说了一个叫 Git 的神奇工具，可以帮助他管理代码的变化。他决定尝试一下，于是他打开了终端，输入了下面的命令：\ngit init # 初始化一个本地仓库 git add . # 添加所有文件到暂存区 git commit -m \u0026#34;first commit\u0026#34; # 提交第一次修改到本地仓库 这样，他就成功地创建了一个 Git 仓库，并且保存了他的第一个版本。他觉得很开心，因为这样他就不用担心代码丢失或者混乱了。😁\n第二天: 远程仓库 小明觉得自己的代码写得很不错，想要分享给其他人看看。但是他发现把文件发给别人很麻烦，而且如果别人也修改了代码，就很难合并。有一天，他听说了一个叫 GitHub 的网站，可以免费托管 Git 仓库，并且方便和其他人协作。他决定尝试一下，于是他注册了一个 GitHub 账号，并且在网站上创建了一个空的仓库。\n然后，他在终端输入了下面的命令：\ngit remote add origin https://github.com/xiaoming/myproject.git # 添加远程仓库地址 git push -u origin master # 推送本地 master 分支到远程仓库 这样，他就成功地把自己的代码上传到了 GitHub 上，并且和远程仓库建立了联系。他觉得很兴奋，因为这样他就可以和全世界的程序员交流了。😍\n第三天: 分支管理 小明在 GitHub 上发现了一个很有趣的开源项目，想要参与其中。但是他不想直接修改别人的代码，而是想先在自己的电脑上做一些改进，然后再提交给项目的作者。有一天，他听说了一个叫分支的概念，可以让他在不影响主线的情况下，创建自己的代码版本。他决定尝试一下，于是他在终端输入了下面的命令：\ngit clone https://github.com/someone/awesome-project.git # 从远程仓库克隆项目到本地 cd awesome-project # 进入项目目录 git checkout -b dev # 创建并切换到 dev 分支 这样，他就成功地在本地创建了一个 dev 分支，并且和远程仓库的 master 分支分开了。他觉得很自由，因为这样他就可以随心所欲地修改代码了。😎\n第四天: 合并与冲突 小明在 dev 分支上修改了一些代码，觉得很满意，想要把自己的改进合并到 master 分支上，然后推送到远程仓库，让项目的作者看看。有一天，他听说了一个叫合并的操作，可以把两个分支的代码合并成一个。他决定尝试一下，于是他在终端输入了下面的命令：\ngit checkout master # 切换到 master 分支 git merge dev # 合并 dev 分支到 master 分支 git push origin master # 推送 master 分支到远程仓库 这样，他就成功地把自己的代码合并到了 master 分支，并且推送到了远程仓库。他觉得很骄傲，因为这样他就可以为开源项目做出贡献了。😊\n但是，有时候合并分支并不是一帆风顺的。有一次，小明在 dev 分支上修改了一个文件，而项目的作者也在 master 分支上修改了同一个文件，并且先于小明推送到了远程仓库。当小明想要合并分支时，就发生了冲突。有一天，他听说了一个叫解决冲突的方法，可以手动选择保留哪些代码。他决定尝试一下，于是他在终端输入了下面的命令：\ngit pull origin master # 拉取远程仓库的 master 分支 git merge master # 合并 master 分支到 dev 分支 # 打开冲突文件，编辑保存 git add . # 添加所有文件到暂存区 git commit -m \u0026#34;fix conflict\u0026#34; # 提交修改到本地仓库 git push origin dev # 推送 dev 分支到远程仓库 这样，他就成功地解决了冲突，并且把自己的代码推送到了远程仓库。他觉得很成就感，因为这样他就可以和其他人协作了。😄\n第五天: 标签管理与忽略文件 小明在 dev 分支上开发了一个新功能，觉得很完美，想要给这个版本打一个标签，方便以后查找。有一天，他听说了一个叫标签的概念，可以给某个版本起一个有意义的名字。他决定尝试一下，于是他在终端输入了下面的命令：\ngit tag v1.0 # 给当前版本打一个 v1.0 的标签 git push origin v1.0 # 推送标签到远程仓库 这样，他就成功地给自己的代码打了一个标签，并且推送到了远程仓库。他觉得很方便，因为这样他就可以快速定位到某个版本了。😎\n但是，有时候有些文件是不需要被 Git 管理的，比如编译生成的临时文件，或者敏感信息的配置文件。有一天，他听说了一个叫忽略特殊文件的方法，可以让 Git 自动忽略掉这些文件。他决定尝试一下，于是他在项目根目录下创建了一个.gitignore 文件，并且写入了下面的内容：\n*.tmp # 忽略所有.tmp 后缀的文件 config.ini # 忽略 config.ini 文件 这样，他就成功地让 Git 忽略掉了这些特殊文件，并且不会被提交到仓库中。他觉得很安全，因为这样他就可以避免泄露隐私或者浪费空间了。😊\n第六天: 大小写敏感 小明和小红是一个团队的成员，他们都在 GitHub 上为同一个开源项目贡献代码。有一天，小明在本地修改了一个文件的名字，把它从 README.md 改成了 Readme.md ，然后提交并推送到了远程仓库。小红在自己的电脑上拉取了最新的代码，但是她发现自己的文件名还是 README.md ，而且 Git 提示她有一个未合并的文件。她很困惑，不知道为什么会出现这样的情况。\n原来，这是因为 Git 在不同的操作系统上对文件名大小写的敏感度不同。在 Linux 和 Mac OS X 上，Git 是区分大小写的，所以 README.md 和 Readme.md 是两个不同的文件。但是在 Windows 上，Git 是不区分大小写的，所以 README.md 和 Readme.md 是同一个文件。当小明把文件名改成了 Readme.md 时，Git 认为他删除了 README.md ，并且创建了一个新的文件 Readme.md 。当小红拉取代码时，Git 认为她需要合并这两个文件，所以出现了冲突。\n有一天，他们听说了一个叫解决大小写不一致导致的合并冲突的方法，可以让 Git 在 Windows 上也区分大小写。他们决定尝试一下，于是他们在终端输入了下面的命令：\ngit config core.ignorecase false # 设置 Git 在 Windows 上也区分大小写 git mv README.md Readme.md # 重命名文件 git commit -m \u0026#34;rename file\u0026#34; # 提交修改 git push origin master # 推送到远程仓库 这样，他们就成功地解决了大小写不一致导致的合并冲突，并且保持了文件名的一致性。他们觉得很开心，因为这样他们就可以避免以后出现同样的问题了。😁\n第七天: 撤销错误提交与恢复误删文件 小明和小红在开发一个新功能时，不小心提交了一些错误的代码，导致项目无法运行。他们想要撤销这些提交，但是又不想丢失他们的修改。有一天，他们听说了一个叫 reset 的命令，可以让他们回退到某个版本，但是保留他们的修改。他们决定尝试一下，于是他们在终端输入了下面的命令：\ngit reset HEAD~2 # 回退到两个版本之前，保留修改 git status # 查看修改的状态 git add . # 重新添加修改到暂存区 git commit -m \u0026#34;fix bug\u0026#34; # 重新提交修改 git push -f origin master # 强制推送到远程仓库 这样，他们就成功地撤销了错误的提交，并且重新提交了正确的代码。他们觉得很轻松，因为这样他们就可以修复 bug 了。😊\n但是，有时候 reset 命令也会带来麻烦。有一次，小明在回退版本时，不小心加了一个–hard 选项，导致他的修改全部丢失了。他很慌张，不知道如何找回他的修改。有一天，他听说了一个叫 reflog 的命令，可以让他查看所有的提交历史，包括已经被删除或者回退的提交。他决定尝试一下，于是他在终端输入了下面的命令：\ngit reflog # 查看所有的提交历史 git reset --hard c761f5c # 回退到指定的版本 git status # 查看修改的状态 这样，他就成功地找回了他丢失的修改，并且恢复到了正确的版本。他觉得很幸运，因为这样他就可以继续开发了。😄\n第八天: 多人协作与冲突处理 小明和小红在同一个分支上开发一个新功能，他们经常需要拉取对方的代码，然后合并到自己的代码中。有一天，他们听说了一个叫 pull 的命令，可以让他们一步完成拉取和合并的操作。他们决定尝试一下，于是他们在终端输入了下面的命令：\ngit pull origin master # 拉取并合并远程仓库的 master 分支 这样，他们就成功地把对方的代码合并到了自己的代码中，并且保持了同步。他们觉得很方便，因为这样他们就可以避免手动合并的麻烦了。😎\n但是，有时候 pull 命令也会带来问题。有一次，小明和小红在同一个文件上修改了同一行代码，导致出现了冲突。他们很困惑，不知道如何解决这个冲突。有一天，他们听说了一个叫解决冲突的方法，可以让他们手动选择保留哪些代码。他们决定尝试一下，于是他们在终端输入了下面的命令：\ngit pull origin master # 拉取并合并远程仓库的 master 分支 # 打开冲突文件，编辑保存 git add . # 添加所有文件到暂存区 git commit -m \u0026#34;merge conflict\u0026#34; # 提交修改到本地仓库 git push origin master # 推送到远程仓库 这样，他们就成功地解决了冲突，并且把自己的代码推送到了远程仓库。他们觉得很成就感，因为这样他们就可以和对方协作了。😄\n第九天: rebase 和 merge 的区别 小明和小红在同一个项目上开发不同的功能，他们分别在自己的分支上提交了一些代码。有一天，他们想要把自己的代码合并到主分支上，但是他们不知道应该用 rebase 还是 merge 。有一天，他们听说了一个叫 rebase 和 merge 的区别的概念，可以让他们选择合适的方式来合并代码。他们决定尝试一下，于是他们在终端输入了下面的命令：\n# 小明在 dev1 分支上 git checkout dev1 # 切换到 dev1 分支 git rebase master # 把 dev1 分支变基到 master 分支 git push -f origin dev1 # 强制推送 dev1 分支到远程仓库 git checkout master # 切换到 master 分支 git merge dev1 # 合并 dev1 分支到 master 分支 git push origin master # 推送 master 分支到远程仓库 # 小红在 dev2 分支上 git checkout dev2 # 切换到 dev2 分支 git merge master # 合并 master 分支到 dev2 分支 git push origin dev2 # 推送 dev2 分支到远程仓库 git checkout master # 切换到 master 分支 git merge dev2 # 合并 dev2 分支到 master 分支 git push origin master # 推送 master 分支到远程仓库 这样，他们就成功地把自己的代码合并到了主分支上，但是他们发现了一个不同的地方。小明用了 rebase 命令，他的提交历史是一条直线，没有任何分叉；小红用了 merge 命令，她的提交历史是有多个分叉和汇合的结构。他们觉得很好奇，不知道这两种方式有什么优缺点。\n原来，rebase 和 merge 的区别是：\nrebase 是把自己的分支变基到目标分支上，也就是把自己的提交历史放在目标分支的最后，这样可以保持提交历史的整洁和线性。 merge 是把目标分支合并到自己的分支上，也就是把目标分支的提交历史和自己的提交历史合并成一个新的提交，这样可以保持提交历史的完整和真实。 rebase 和 merge 各有优缺点：\nrebase 的优点是可以让提交历史看起来很简洁，方便查看和管理；缺点是会改变提交历史，可能导致冲突或者丢失信息。 merge 的优点是可以保留提交历史的原貌，方便追溯和恢复；缺点是会让提交历史看起来很复杂，不容易理解和维护。 所以，在选择 rebase 还是 merge 时，要根据具体的情况和需求来决定。一般来说：\n如果你想要保持一个干净和线性的提交历史，你可以用 rebase ； 如果你想要保留一个完整和真实的提交历史，你可以用 merge ； 如果你想要在公共的分支上合作，你应该用 merge ，避免用 rebase ，因为 rebase 会改变提交历史，可能导致其他人的困扰； 如果你想要在私有的分支上开发，你可以用 rebase ，因为 rebase 可以让你的提交历史更清晰，方便你自己管理。 第十天: 撤销错误合并和恢复误删的分支 小明和小红在合并分支时，不小心合并了错误的分支，导致项目出现了很多 bug 。他们想要撤销这次合并，但是又不想丢失他们的修改。有一天，他们听说了一个叫 revert 的命令，可以让他们用一次新的提交来回滚之前的提交。他们决定尝试一下，于是他们在终端输入了下面的命令：\ngit log # 查看提交历史 git revert \u0026lt;commit ID\u0026gt; # 回滚指定的提交 git push origin master # 推送到远程仓库 这样，他们就成功地撤销了错误的合并，并且用一次新的提交来记录这次回滚。他们觉得很安全，因为这样他们就不会丢失任何修改了。😊\n但是，有时候 revert 命令也会带来麻烦。有一次，小明在回滚一个合并时，不小心加了一个–no-commit 选项，导致他的修改没有被提交，而是被放在了暂存区。他很慌张，不知道如何恢复这次回滚。有一天，他听说了一个叫 reset 的命令，可以让他回退到某个版本，并且保留或者丢弃他的修改。他决定尝试一下，于是他在终端输入了下面的命令：\ngit reset --soft HEAD^ # 回退到上一个版本，并且保留修改 git status # 查看修改的状态 git add . # 重新添加修改到暂存区 git commit -m \u0026#34;fix bug\u0026#34; # 重新提交修改 git push -f origin master # 强制推送到远程仓库 这样，他就成功地恢复了这次回滚，并且重新提交了正确的代码。他觉得很轻松，因为这样他就可以修复 bug 了。😊\n第十一天: 删除和恢复分支 小明和小红在完成一个功能后，想要删除自己的分支，因为他们觉得这个分支已经没有用了。有一天，他们听说了一个叫 delete 的命令，可以让他们删除本地或者远程的分支。他们决定尝试一下，于是他们在终端输入了下面的命令：\ngit branch -d dev1 # 删除本地的 dev1 分支 git push origin --delete dev1 # 删除远程的 dev1 分支 这样，他们就成功地删除了自己的分支，并且释放了一些空间。他们觉得很爽快，因为这样他们就可以开始新的功能了。😎\n但是，有时候 delete 命令也会带来后悔。有一次，小明在删除一个分支后，发现自己还需要这个分支上的一些代码。他很懊恼，不知道如何找回这个分支。有一天，他听说了一个叫 reflog 的命令，可以让他查看所有的提交历史，包括已经被删除或者回退的提交。他决定尝试一下，于是他在终端输入了下面的命令：\ngit reflog # 查看所有的提交历史 git checkout -b dev1 \u0026lt;commit ID\u0026gt; # 用指定的提交创建一个新的 dev1 分支 git push origin dev1 # 推送 dev1 分支到远程仓库 这样，他就成功地找回了自己的分支，并且恢复到了正确的版本。他觉得很幸运，因为这样他就可以继续使用这个分支了。😄\n最后 到此为止，我已经给你讲完了小明和小红的故事，你觉得怎么样？👏\n评论1 补充一个 git stash 指令： 小明在本地开发一个新功能的时候需要修改本地的配置文件，但是这个修改只能保存在本地，而且每次开发新功能的时候都需要修改本地的配置文件。小明不想每次都手动修改配置文件，有一天小红告诉他一个叫 stash 的指令，可以将本地的修改丢弃并保存在 git 中，然后通过 git stash pop 恢复最近一次的修改、git stash apply 恢复某一次修改的内容，这样小明就无需每次都手动修改配置文件了，他觉得很开心（ doge ；另外这个指令切分支的时候也很有用~\n避免代码覆盖 如果你已经对本地仓库进行了修改，并且想要将这些修改推送到远程仓库中，那么在执行 git pull 和 git commit 时需要注意顺序。\n通常情况下，建议先提交本地的修改后再拉取最新的远端代码。原因是，如果在执行 git pull 操作时，远程仓库中的代码与本地已有的修改产生了冲突，此时会提示需要进行代码合并。如果此时先执行 git pull，可能会导致本地的修改被覆盖或者出现代码冲突，影响开发工作的进展。\n因此，在执行 Git 操作时建议先提交本地的修改，再拉取最新的远端代码，具体的操作步骤如下：\n执行 git add 将修改后的文件添加到暂存区，即将要提交的文件列表。 执行 git commit 将修改提交到本地仓库，并添加提交信息。 执行 git pull 拉取最新的远端代码并进行合并。 如果 git pull 后发现有代码冲突，则需要手动解决冲突后重新进行 git add 和 git commit。 最后执行 git push 将本地仓库的修改推送到远程仓库中。 总之，建议在 Git 操作时注意先提交本地的修改后再拉取最新的远端代码，这样可以避免出现代码冲突，提高开发效率。\n其他资源地址 1、https://learngitbranching.js.org/?locale=zh_CN\n2、https://www.atlassian.com/git/tutorials/merging-vs-rebasing\n3、原文地址：https://www.wangwangit.com/Git%E7%A5%9E%E5%A5%87%E4%B9%8B%E6%97%85/\n","permalink":"https://liguicheng.github.io/posts/tech/git%E7%A5%9E%E5%A5%87%E4%B9%8B%E6%97%85/","summary":"第一天: 本地仓库 故事的主角是小明，一个刚入门编程的小白。他正在为一个项目写代码，但是他发现每次修改代码都很麻烦，因为他要不断地备份文件，而且很容易弄混版本。有一天，他听说了一个叫 Git 的神奇工具，可以帮助他管理代码的变化。他决定尝试一下，于是他打开了终端，输入了下面的命令： git init # 初始","title":"Git神奇之旅"},{"content":"\r更新文章，使用hugo生成新的静态页面，并使用git push进行同步\nsulv-hugo-papermod目录下 hugo -F --cleanDestinationDir cd public git add . git status git commit -m \u0026#34;add blog post\u0026#34; git push ","permalink":"https://liguicheng.github.io/posts/resource/blog/","summary":"更新文章，使用hugo生成新的静态页面，并使用git push进行同步 sulv-hugo-papermod目录下 hugo -F --cleanDestinationDir cd public git add . git status git commit -m \u0026#34;add blog post\u0026#34; git push","title":"建站流程"},{"content":"","permalink":"https://liguicheng.github.io/posts/read/read/","summary":"","title":"Read"},{"content":"","permalink":"https://liguicheng.github.io/posts/tech/tech/","summary":"","title":"Tech"},{"content":"\rligc\u0026#39;s Blog\r一个记录工作学习生活的个人小站\r👉友链格式\r名称： LiGC\u0026rsquo;s Blog 网址： https://liguicheng.github.io/ 图标： https://liguicheng.github.io/img/首页图片.jpg 描述： 一个记录工作学习生活的个人小站 👉友链申请要求\r秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n","permalink":"https://liguicheng.github.io/links/","summary":"ligc\u0026#39;s Blog 一个记录工作学习生活的个人小站 👉友链格式 名称： LiGC\u0026rsquo;s Blog 网址： https://liguicheng.github.io/ 图标： https://liguicheng.github.io/img/首页图片.jpg 描述： 一个记录工作学习生活的个人小站 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内","title":"🤝友链"},{"content":"关于我\n英文名: Li GC 地点 深圳 职业: 程序员 运动: 乒乓球 ","permalink":"https://liguicheng.github.io/about/","summary":"关于我 英文名: Li GC 地点 深圳 职业: 程序员 运动: 乒乓球","title":"🙋🏻‍♂️关于"}]